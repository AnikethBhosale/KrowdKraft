name: Update README Stats

on:
  schedule:
    # Runs daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-readme-stats.yml'

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate stats

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Fetch Repository Statistics
        id: stats
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Fetch closed issues
            const { data: closedIssues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'closed',
              per_page: 1
            });
            const totalClosedIssues = closedIssues.length > 0 ? 
              parseInt(github.rest.issues.listForRepo.endpoint.merge({ owner, repo, state: 'closed' }).headers['link']?.match(/page=(\d+)>; rel="last"/)?.[1] || closedIssues.length) : 0;

            // Fetch all contributors
            const contributors = await github.paginate(github.rest.repos.listContributors, {
              owner,
              repo,
              per_page: 100
            });

            const totalContributors = contributors.length;

            // Get top 5 contributors
            const topContributors = contributors.slice(0, 5).map(contributor => ({
              login: contributor.login,
              avatar_url: contributor.avatar_url,
              contributions: contributor.contributions,
              profile_url: contributor.html_url
            }));

            // Fetch repository data
            const { data: repoData } = await github.rest.repos.get({
              owner,
              repo
            });

            const stars = repoData.stargazers_count;
            const forks = repoData.forks_count;
            const openIssues = repoData.open_issues_count;

            // Fetch pull requests
            const { data: allPRs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'all',
              per_page: 1
            });

            const { data: closedPRs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'closed',
              per_page: 1
            });

            // Store stats as outputs
            core.setOutput('total_closed_issues', totalClosedIssues);
            core.setOutput('total_contributors', totalContributors);
            core.setOutput('stars', stars);
            core.setOutput('forks', forks);
            core.setOutput('open_issues', openIssues);
            core.setOutput('top_contributors', JSON.stringify(topContributors));

            return {
              totalClosedIssues,
              totalContributors,
              stars,
              forks,
              openIssues,
              topContributors
            };

      - name: Generate Stats Section
        id: generate
        run: |
          # Get stats from previous step
          CLOSED_ISSUES="${{ steps.stats.outputs.total_closed_issues }}"
          TOTAL_CONTRIBUTORS="${{ steps.stats.outputs.total_contributors }}"
          STARS="${{ steps.stats.outputs.stars }}"
          FORKS="${{ steps.stats.outputs.forks }}"
          OPEN_ISSUES="${{ steps.stats.outputs.open_issues }}"
          TOP_CONTRIBUTORS='${{ steps.stats.outputs.top_contributors }}'

          # Generate markdown for stats section
          cat > stats_section.md << 'EOF'
          ## üìä Community Stats

          <div align="center">

          ![GitHub stars](https://img.shields.io/github/stars/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=yellow)
          ![GitHub forks](https://img.shields.io/github/forks/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=blue)
          ![GitHub issues](https://img.shields.io/github/issues/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=red)
          ![GitHub closed issues](https://img.shields.io/github/issues-closed/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=green)
          ![GitHub pull requests](https://img.shields.io/github/issues-pr/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=orange)
          ![GitHub contributors](https://img.shields.io/github/contributors/DarshanKrishna-DK/KrowdKraft?style=for-the-badge&logo=github&color=purple)

          </div>

          ### Repository Statistics

          | Metric | Count |
          |--------|-------|
          | ‚≠ê **Stars** | ${STARS} |
          | üç¥ **Forks** | ${FORKS} |
          | üêõ **Open Issues** | ${OPEN_ISSUES} |
          | ‚úÖ **Closed Issues** | ${CLOSED_ISSUES} |
          | üë• **Total Contributors** | ${TOTAL_CONTRIBUTORS} |

          ### üèÜ Top Contributors

          <table>
            <tr>
          EOF

          # Parse top contributors JSON and add to markdown
          echo "$TOP_CONTRIBUTORS" | jq -r '.[] | "<td align=\"center\"><a href=\"\(.profile_url)\"><img src=\"\(.avatar_url)\" width=\"100px;\" alt=\"\(.login)\"/><br /><sub><b>\(.login)</b></sub></a><br />\(.contributions) contributions</td>"' >> stats_section.md

          cat >> stats_section.md << 'EOF'
            </tr>
          </table>

          <div align="center">
            <i>Stats updated daily via GitHub Actions</i>
          </div>

          ---
          EOF

          echo "Stats section generated successfully"

      - name: Update README
        run: |
          # Check if stats section exists in README
          if grep -q "## üìä Community Stats" README.md; then
            # Remove existing stats section
            sed -i '/## üìä Community Stats/,/^---$/d' README.md
          fi

          # Find insertion point (before "How to Contribute" section)
          if grep -q "## How to Contribute" README.md; then
            # Insert stats section before "How to Contribute"
            sed -i '/## How to Contribute/e cat stats_section.md' README.md
          else
            # Append to end if "How to Contribute" not found
            cat stats_section.md >> README.md
          fi

          echo "README updated successfully"

      - name: Commit and Push Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes
          if git diff --quiet README.md; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "chore: update README stats [skip ci]"
            git push
            echo "Changes committed and pushed"
          fi